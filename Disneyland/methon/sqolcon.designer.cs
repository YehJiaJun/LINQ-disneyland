#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.42000
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Disneyland.methon
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Disneyland_Shanghai_ANO")]
	public partial class sqolconDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 擴充性方法定義
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertTicketOffers(TicketOffers instance);
    partial void UpdateTicketOffers(TicketOffers instance);
    partial void DeleteTicketOffers(TicketOffers instance);
    partial void InsertAttractions(Attractions instance);
    partial void UpdateAttractions(Attractions instance);
    partial void DeleteAttractions(Attractions instance);
    partial void InsertBusinessSchedule(BusinessSchedule instance);
    partial void UpdateBusinessSchedule(BusinessSchedule instance);
    partial void DeleteBusinessSchedule(BusinessSchedule instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertMaintenanceSchedule(MaintenanceSchedule instance);
    partial void UpdateMaintenanceSchedule(MaintenanceSchedule instance);
    partial void DeleteMaintenanceSchedule(MaintenanceSchedule instance);
    partial void InsertNewtext(Newtext instance);
    partial void UpdateNewtext(Newtext instance);
    partial void DeleteNewtext(Newtext instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertOrderDetail(OrderDetail instance);
    partial void UpdateOrderDetail(OrderDetail instance);
    partial void DeleteOrderDetail(OrderDetail instance);
    partial void InsertPaymentMethod(PaymentMethod instance);
    partial void UpdatePaymentMethod(PaymentMethod instance);
    partial void DeletePaymentMethod(PaymentMethod instance);
    partial void InsertQueueOfAttractions(QueueOfAttractions instance);
    partial void UpdateQueueOfAttractions(QueueOfAttractions instance);
    partial void DeleteQueueOfAttractions(QueueOfAttractions instance);
    partial void InsertThemePark(ThemePark instance);
    partial void UpdateThemePark(ThemePark instance);
    partial void DeleteThemePark(ThemePark instance);
    #endregion
		
		public sqolconDataContext() : 
				base(global::Disneyland.Properties.Settings.Default.Disneyland_Shanghai_ANOConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public sqolconDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public sqolconDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public sqolconDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public sqolconDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Account
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<TicketOffers> TicketOffers
		{
			get
			{
				return this.GetTable<TicketOffers>();
			}
		}
		
		public System.Data.Linq.Table<Attractions> Attractions
		{
			get
			{
				return this.GetTable<Attractions>();
			}
		}
		
		public System.Data.Linq.Table<BusinessSchedule> BusinessSchedule
		{
			get
			{
				return this.GetTable<BusinessSchedule>();
			}
		}
		
		public System.Data.Linq.Table<Group> Group
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<MaintenanceSchedule> MaintenanceSchedule
		{
			get
			{
				return this.GetTable<MaintenanceSchedule>();
			}
		}
		
		public System.Data.Linq.Table<Newtext> Newtext
		{
			get
			{
				return this.GetTable<Newtext>();
			}
		}
		
		public System.Data.Linq.Table<Newtraffic> Newtraffic
		{
			get
			{
				return this.GetTable<Newtraffic>();
			}
		}
		
		public System.Data.Linq.Table<Order> Order
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<OrderDetail> OrderDetail
		{
			get
			{
				return this.GetTable<OrderDetail>();
			}
		}
		
		public System.Data.Linq.Table<PaymentMethod> PaymentMethod
		{
			get
			{
				return this.GetTable<PaymentMethod>();
			}
		}
		
		public System.Data.Linq.Table<QueueOfAttractions> QueueOfAttractions
		{
			get
			{
				return this.GetTable<QueueOfAttractions>();
			}
		}
		
		public System.Data.Linq.Table<ThemePark> ThemePark
		{
			get
			{
				return this.GetTable<ThemePark>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AccountID;
		
		private string _Password;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private System.Nullable<char> _Gender;
		
		private string _Citizenship;
		
		private string _Email;
		
		private System.Nullable<int> _GroupID;
		
		private EntitySet<Order> _Order;
		
		private EntityRef<Group> _Group;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIDChanging(string value);
    partial void OnAccountIDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnGenderChanging(System.Nullable<char> value);
    partial void OnGenderChanged();
    partial void OnCitizenshipChanging(string value);
    partial void OnCitizenshipChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    #endregion
		
		public Account()
		{
			this._Order = new EntitySet<Order>(new Action<Order>(this.attach_Order), new Action<Order>(this.detach_Order));
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Date")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NChar(1)")]
		public System.Nullable<char> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Citizenship", DbType="NVarChar(20)")]
		public string Citizenship
		{
			get
			{
				return this._Citizenship;
			}
			set
			{
				if ((this._Citizenship != value))
				{
					this.OnCitizenshipChanging(value);
					this.SendPropertyChanging();
					this._Citizenship = value;
					this.SendPropertyChanged("Citizenship");
					this.OnCitizenshipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Order", Storage="_Order", ThisKey="AccountID", OtherKey="AccountID")]
		public EntitySet<Order> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				this._Order.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Account", Storage="_Group", ThisKey="GroupID", OtherKey="GroupID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Account.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Account.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TicketOffers")]
	public partial class TicketOffers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TicketOffersID;
		
		private string _TicketName;
		
		private System.Nullable<int> _TicketPrice;
		
		private System.Nullable<double> _Discount;
		
		private EntitySet<OrderDetail> _OrderDetail;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketOffersIDChanging(int value);
    partial void OnTicketOffersIDChanged();
    partial void OnTicketNameChanging(string value);
    partial void OnTicketNameChanged();
    partial void OnTicketPriceChanging(System.Nullable<int> value);
    partial void OnTicketPriceChanged();
    partial void OnDiscountChanging(System.Nullable<double> value);
    partial void OnDiscountChanged();
    #endregion
		
		public TicketOffers()
		{
			this._OrderDetail = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetail), new Action<OrderDetail>(this.detach_OrderDetail));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketOffersID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TicketOffersID
		{
			get
			{
				return this._TicketOffersID;
			}
			set
			{
				if ((this._TicketOffersID != value))
				{
					this.OnTicketOffersIDChanging(value);
					this.SendPropertyChanging();
					this._TicketOffersID = value;
					this.SendPropertyChanged("TicketOffersID");
					this.OnTicketOffersIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketName", DbType="NVarChar(50)")]
		public string TicketName
		{
			get
			{
				return this._TicketName;
			}
			set
			{
				if ((this._TicketName != value))
				{
					this.OnTicketNameChanging(value);
					this.SendPropertyChanging();
					this._TicketName = value;
					this.SendPropertyChanged("TicketName");
					this.OnTicketNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketPrice", DbType="Int")]
		public System.Nullable<int> TicketPrice
		{
			get
			{
				return this._TicketPrice;
			}
			set
			{
				if ((this._TicketPrice != value))
				{
					this.OnTicketPriceChanging(value);
					this.SendPropertyChanging();
					this._TicketPrice = value;
					this.SendPropertyChanged("TicketPrice");
					this.OnTicketPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Float")]
		public System.Nullable<double> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TicketOffers_OrderDetail", Storage="_OrderDetail", ThisKey="TicketOffersID", OtherKey="TicketOffersID")]
		public EntitySet<OrderDetail> OrderDetail
		{
			get
			{
				return this._OrderDetail;
			}
			set
			{
				this._OrderDetail.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetail(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.TicketOffers = this;
		}
		
		private void detach_OrderDetail(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.TicketOffers = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attractions")]
	public partial class Attractions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttractionsID;
		
		private System.Nullable<int> _ThemeParkID;
		
		private string _AttractionsName;
		
		private System.Nullable<int> _MainAttractionsID;
		
		private System.Nullable<double> _TimeSpentSeconds;
		
		private System.Nullable<double> _BatchConsumption;
		
		private string _Features;
		
		private string _SuitableFor;
		
		private System.Nullable<bool> _isFastPassage;
		
		private System.Nullable<bool> _isParentChild;
		
		private System.Nullable<bool> _isStageDrama;
		
		private string _Photo;
		
		private string _Video;
		
		private EntitySet<BusinessSchedule> _BusinessSchedule;
		
		private EntitySet<MaintenanceSchedule> _MaintenanceSchedule;
		
		private EntitySet<QueueOfAttractions> _QueueOfAttractions;
		
		private EntityRef<ThemePark> _ThemePark;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttractionsIDChanging(int value);
    partial void OnAttractionsIDChanged();
    partial void OnThemeParkIDChanging(System.Nullable<int> value);
    partial void OnThemeParkIDChanged();
    partial void OnAttractionsNameChanging(string value);
    partial void OnAttractionsNameChanged();
    partial void OnMainAttractionsIDChanging(System.Nullable<int> value);
    partial void OnMainAttractionsIDChanged();
    partial void OnTimeSpentSecondsChanging(System.Nullable<double> value);
    partial void OnTimeSpentSecondsChanged();
    partial void OnBatchConsumptionChanging(System.Nullable<double> value);
    partial void OnBatchConsumptionChanged();
    partial void OnFeaturesChanging(string value);
    partial void OnFeaturesChanged();
    partial void OnSuitableForChanging(string value);
    partial void OnSuitableForChanged();
    partial void OnisFastPassageChanging(System.Nullable<bool> value);
    partial void OnisFastPassageChanged();
    partial void OnisParentChildChanging(System.Nullable<bool> value);
    partial void OnisParentChildChanged();
    partial void OnisStageDramaChanging(System.Nullable<bool> value);
    partial void OnisStageDramaChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    partial void OnVideoChanging(string value);
    partial void OnVideoChanged();
    #endregion
		
		public Attractions()
		{
			this._BusinessSchedule = new EntitySet<BusinessSchedule>(new Action<BusinessSchedule>(this.attach_BusinessSchedule), new Action<BusinessSchedule>(this.detach_BusinessSchedule));
			this._MaintenanceSchedule = new EntitySet<MaintenanceSchedule>(new Action<MaintenanceSchedule>(this.attach_MaintenanceSchedule), new Action<MaintenanceSchedule>(this.detach_MaintenanceSchedule));
			this._QueueOfAttractions = new EntitySet<QueueOfAttractions>(new Action<QueueOfAttractions>(this.attach_QueueOfAttractions), new Action<QueueOfAttractions>(this.detach_QueueOfAttractions));
			this._ThemePark = default(EntityRef<ThemePark>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttractionsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AttractionsID
		{
			get
			{
				return this._AttractionsID;
			}
			set
			{
				if ((this._AttractionsID != value))
				{
					this.OnAttractionsIDChanging(value);
					this.SendPropertyChanging();
					this._AttractionsID = value;
					this.SendPropertyChanged("AttractionsID");
					this.OnAttractionsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThemeParkID", DbType="Int")]
		public System.Nullable<int> ThemeParkID
		{
			get
			{
				return this._ThemeParkID;
			}
			set
			{
				if ((this._ThemeParkID != value))
				{
					if (this._ThemePark.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThemeParkIDChanging(value);
					this.SendPropertyChanging();
					this._ThemeParkID = value;
					this.SendPropertyChanged("ThemeParkID");
					this.OnThemeParkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttractionsName", DbType="NVarChar(150)")]
		public string AttractionsName
		{
			get
			{
				return this._AttractionsName;
			}
			set
			{
				if ((this._AttractionsName != value))
				{
					this.OnAttractionsNameChanging(value);
					this.SendPropertyChanging();
					this._AttractionsName = value;
					this.SendPropertyChanged("AttractionsName");
					this.OnAttractionsNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainAttractionsID", DbType="Int")]
		public System.Nullable<int> MainAttractionsID
		{
			get
			{
				return this._MainAttractionsID;
			}
			set
			{
				if ((this._MainAttractionsID != value))
				{
					this.OnMainAttractionsIDChanging(value);
					this.SendPropertyChanging();
					this._MainAttractionsID = value;
					this.SendPropertyChanged("MainAttractionsID");
					this.OnMainAttractionsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeSpentSeconds", DbType="Float")]
		public System.Nullable<double> TimeSpentSeconds
		{
			get
			{
				return this._TimeSpentSeconds;
			}
			set
			{
				if ((this._TimeSpentSeconds != value))
				{
					this.OnTimeSpentSecondsChanging(value);
					this.SendPropertyChanging();
					this._TimeSpentSeconds = value;
					this.SendPropertyChanged("TimeSpentSeconds");
					this.OnTimeSpentSecondsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatchConsumption", DbType="Float")]
		public System.Nullable<double> BatchConsumption
		{
			get
			{
				return this._BatchConsumption;
			}
			set
			{
				if ((this._BatchConsumption != value))
				{
					this.OnBatchConsumptionChanging(value);
					this.SendPropertyChanging();
					this._BatchConsumption = value;
					this.SendPropertyChanged("BatchConsumption");
					this.OnBatchConsumptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Features", DbType="NVarChar(500)")]
		public string Features
		{
			get
			{
				return this._Features;
			}
			set
			{
				if ((this._Features != value))
				{
					this.OnFeaturesChanging(value);
					this.SendPropertyChanging();
					this._Features = value;
					this.SendPropertyChanged("Features");
					this.OnFeaturesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuitableFor", DbType="NVarChar(50)")]
		public string SuitableFor
		{
			get
			{
				return this._SuitableFor;
			}
			set
			{
				if ((this._SuitableFor != value))
				{
					this.OnSuitableForChanging(value);
					this.SendPropertyChanging();
					this._SuitableFor = value;
					this.SendPropertyChanged("SuitableFor");
					this.OnSuitableForChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isFastPassage", DbType="Bit")]
		public System.Nullable<bool> isFastPassage
		{
			get
			{
				return this._isFastPassage;
			}
			set
			{
				if ((this._isFastPassage != value))
				{
					this.OnisFastPassageChanging(value);
					this.SendPropertyChanging();
					this._isFastPassage = value;
					this.SendPropertyChanged("isFastPassage");
					this.OnisFastPassageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isParentChild", DbType="Bit")]
		public System.Nullable<bool> isParentChild
		{
			get
			{
				return this._isParentChild;
			}
			set
			{
				if ((this._isParentChild != value))
				{
					this.OnisParentChildChanging(value);
					this.SendPropertyChanging();
					this._isParentChild = value;
					this.SendPropertyChanged("isParentChild");
					this.OnisParentChildChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isStageDrama", DbType="Bit")]
		public System.Nullable<bool> isStageDrama
		{
			get
			{
				return this._isStageDrama;
			}
			set
			{
				if ((this._isStageDrama != value))
				{
					this.OnisStageDramaChanging(value);
					this.SendPropertyChanging();
					this._isStageDrama = value;
					this.SendPropertyChanged("isStageDrama");
					this.OnisStageDramaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="NVarChar(150)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Video", DbType="NVarChar(150)")]
		public string Video
		{
			get
			{
				return this._Video;
			}
			set
			{
				if ((this._Video != value))
				{
					this.OnVideoChanging(value);
					this.SendPropertyChanging();
					this._Video = value;
					this.SendPropertyChanged("Video");
					this.OnVideoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attractions_BusinessSchedule", Storage="_BusinessSchedule", ThisKey="AttractionsID", OtherKey="AttractionsID")]
		public EntitySet<BusinessSchedule> BusinessSchedule
		{
			get
			{
				return this._BusinessSchedule;
			}
			set
			{
				this._BusinessSchedule.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attractions_MaintenanceSchedule", Storage="_MaintenanceSchedule", ThisKey="AttractionsID", OtherKey="AttractionsID")]
		public EntitySet<MaintenanceSchedule> MaintenanceSchedule
		{
			get
			{
				return this._MaintenanceSchedule;
			}
			set
			{
				this._MaintenanceSchedule.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attractions_QueueOfAttractions", Storage="_QueueOfAttractions", ThisKey="AttractionsID", OtherKey="AttractionsID")]
		public EntitySet<QueueOfAttractions> QueueOfAttractions
		{
			get
			{
				return this._QueueOfAttractions;
			}
			set
			{
				this._QueueOfAttractions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThemePark_Attractions", Storage="_ThemePark", ThisKey="ThemeParkID", OtherKey="ThemeParkID", IsForeignKey=true)]
		public ThemePark ThemePark
		{
			get
			{
				return this._ThemePark.Entity;
			}
			set
			{
				ThemePark previousValue = this._ThemePark.Entity;
				if (((previousValue != value) 
							|| (this._ThemePark.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThemePark.Entity = null;
						previousValue.Attractions.Remove(this);
					}
					this._ThemePark.Entity = value;
					if ((value != null))
					{
						value.Attractions.Add(this);
						this._ThemeParkID = value.ThemeParkID;
					}
					else
					{
						this._ThemeParkID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ThemePark");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BusinessSchedule(BusinessSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Attractions = this;
		}
		
		private void detach_BusinessSchedule(BusinessSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Attractions = null;
		}
		
		private void attach_MaintenanceSchedule(MaintenanceSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Attractions = this;
		}
		
		private void detach_MaintenanceSchedule(MaintenanceSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Attractions = null;
		}
		
		private void attach_QueueOfAttractions(QueueOfAttractions entity)
		{
			this.SendPropertyChanging();
			entity.Attractions = this;
		}
		
		private void detach_QueueOfAttractions(QueueOfAttractions entity)
		{
			this.SendPropertyChanging();
			entity.Attractions = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BusinessSchedule")]
	public partial class BusinessSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BusinessDTNo;
		
		private System.DateTime _BusinessDate;
		
		private int _AttractionsID;
		
		private System.Nullable<System.TimeSpan> _StartTime;
		
		private System.Nullable<System.TimeSpan> _EndTime;
		
		private string _ImportantNotices;
		
		private EntityRef<Attractions> _Attractions;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessDTNoChanging(int value);
    partial void OnBusinessDTNoChanged();
    partial void OnBusinessDateChanging(System.DateTime value);
    partial void OnBusinessDateChanged();
    partial void OnAttractionsIDChanging(int value);
    partial void OnAttractionsIDChanged();
    partial void OnStartTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnEndTimeChanged();
    partial void OnImportantNoticesChanging(string value);
    partial void OnImportantNoticesChanged();
    #endregion
		
		public BusinessSchedule()
		{
			this._Attractions = default(EntityRef<Attractions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessDTNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BusinessDTNo
		{
			get
			{
				return this._BusinessDTNo;
			}
			set
			{
				if ((this._BusinessDTNo != value))
				{
					this.OnBusinessDTNoChanging(value);
					this.SendPropertyChanging();
					this._BusinessDTNo = value;
					this.SendPropertyChanged("BusinessDTNo");
					this.OnBusinessDTNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessDate", DbType="Date NOT NULL")]
		public System.DateTime BusinessDate
		{
			get
			{
				return this._BusinessDate;
			}
			set
			{
				if ((this._BusinessDate != value))
				{
					this.OnBusinessDateChanging(value);
					this.SendPropertyChanging();
					this._BusinessDate = value;
					this.SendPropertyChanged("BusinessDate");
					this.OnBusinessDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttractionsID", DbType="Int NOT NULL")]
		public int AttractionsID
		{
			get
			{
				return this._AttractionsID;
			}
			set
			{
				if ((this._AttractionsID != value))
				{
					if (this._Attractions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttractionsIDChanging(value);
					this.SendPropertyChanging();
					this._AttractionsID = value;
					this.SendPropertyChanged("AttractionsID");
					this.OnAttractionsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportantNotices", DbType="NVarChar(200)")]
		public string ImportantNotices
		{
			get
			{
				return this._ImportantNotices;
			}
			set
			{
				if ((this._ImportantNotices != value))
				{
					this.OnImportantNoticesChanging(value);
					this.SendPropertyChanging();
					this._ImportantNotices = value;
					this.SendPropertyChanged("ImportantNotices");
					this.OnImportantNoticesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attractions_BusinessSchedule", Storage="_Attractions", ThisKey="AttractionsID", OtherKey="AttractionsID", IsForeignKey=true)]
		public Attractions Attractions
		{
			get
			{
				return this._Attractions.Entity;
			}
			set
			{
				Attractions previousValue = this._Attractions.Entity;
				if (((previousValue != value) 
							|| (this._Attractions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attractions.Entity = null;
						previousValue.BusinessSchedule.Remove(this);
					}
					this._Attractions.Entity = value;
					if ((value != null))
					{
						value.BusinessSchedule.Add(this);
						this._AttractionsID = value.AttractionsID;
					}
					else
					{
						this._AttractionsID = default(int);
					}
					this.SendPropertyChanged("Attractions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupID;
		
		private string _GroupName;
		
		private string _Authority;
		
		private EntitySet<Account> _Account;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnAuthorityChanging(string value);
    partial void OnAuthorityChanged();
    #endregion
		
		public Group()
		{
			this._Account = new EntitySet<Account>(new Action<Account>(this.attach_Account), new Action<Account>(this.detach_Account));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(50)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Authority", DbType="NVarChar(50)")]
		public string Authority
		{
			get
			{
				return this._Authority;
			}
			set
			{
				if ((this._Authority != value))
				{
					this.OnAuthorityChanging(value);
					this.SendPropertyChanging();
					this._Authority = value;
					this.SendPropertyChanged("Authority");
					this.OnAuthorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Account", Storage="_Account", ThisKey="GroupID", OtherKey="GroupID")]
		public EntitySet<Account> Account
		{
			get
			{
				return this._Account;
			}
			set
			{
				this._Account.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Account(Account entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Account(Account entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MaintenanceSchedule")]
	public partial class MaintenanceSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaintenanceDTNo;
		
		private int _AttractionsID;
		
		private System.DateTime _MaintenanceSDate;
		
		private System.DateTime _MaintenanceEDate;
		
		private string _Notices;
		
		private EntityRef<Attractions> _Attractions;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaintenanceDTNoChanging(int value);
    partial void OnMaintenanceDTNoChanged();
    partial void OnAttractionsIDChanging(int value);
    partial void OnAttractionsIDChanged();
    partial void OnMaintenanceSDateChanging(System.DateTime value);
    partial void OnMaintenanceSDateChanged();
    partial void OnMaintenanceEDateChanging(System.DateTime value);
    partial void OnMaintenanceEDateChanged();
    partial void OnNoticesChanging(string value);
    partial void OnNoticesChanged();
    #endregion
		
		public MaintenanceSchedule()
		{
			this._Attractions = default(EntityRef<Attractions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaintenanceDTNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaintenanceDTNo
		{
			get
			{
				return this._MaintenanceDTNo;
			}
			set
			{
				if ((this._MaintenanceDTNo != value))
				{
					this.OnMaintenanceDTNoChanging(value);
					this.SendPropertyChanging();
					this._MaintenanceDTNo = value;
					this.SendPropertyChanged("MaintenanceDTNo");
					this.OnMaintenanceDTNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttractionsID", DbType="Int NOT NULL")]
		public int AttractionsID
		{
			get
			{
				return this._AttractionsID;
			}
			set
			{
				if ((this._AttractionsID != value))
				{
					if (this._Attractions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttractionsIDChanging(value);
					this.SendPropertyChanging();
					this._AttractionsID = value;
					this.SendPropertyChanged("AttractionsID");
					this.OnAttractionsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaintenanceSDate", DbType="Date NOT NULL")]
		public System.DateTime MaintenanceSDate
		{
			get
			{
				return this._MaintenanceSDate;
			}
			set
			{
				if ((this._MaintenanceSDate != value))
				{
					this.OnMaintenanceSDateChanging(value);
					this.SendPropertyChanging();
					this._MaintenanceSDate = value;
					this.SendPropertyChanged("MaintenanceSDate");
					this.OnMaintenanceSDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaintenanceEDate", DbType="Date NOT NULL")]
		public System.DateTime MaintenanceEDate
		{
			get
			{
				return this._MaintenanceEDate;
			}
			set
			{
				if ((this._MaintenanceEDate != value))
				{
					this.OnMaintenanceEDateChanging(value);
					this.SendPropertyChanging();
					this._MaintenanceEDate = value;
					this.SendPropertyChanged("MaintenanceEDate");
					this.OnMaintenanceEDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notices", DbType="NVarChar(200)")]
		public string Notices
		{
			get
			{
				return this._Notices;
			}
			set
			{
				if ((this._Notices != value))
				{
					this.OnNoticesChanging(value);
					this.SendPropertyChanging();
					this._Notices = value;
					this.SendPropertyChanged("Notices");
					this.OnNoticesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attractions_MaintenanceSchedule", Storage="_Attractions", ThisKey="AttractionsID", OtherKey="AttractionsID", IsForeignKey=true)]
		public Attractions Attractions
		{
			get
			{
				return this._Attractions.Entity;
			}
			set
			{
				Attractions previousValue = this._Attractions.Entity;
				if (((previousValue != value) 
							|| (this._Attractions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attractions.Entity = null;
						previousValue.MaintenanceSchedule.Remove(this);
					}
					this._Attractions.Entity = value;
					if ((value != null))
					{
						value.MaintenanceSchedule.Add(this);
						this._AttractionsID = value.AttractionsID;
					}
					else
					{
						this._AttractionsID = default(int);
					}
					this.SendPropertyChanged("Attractions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Newtext")]
	public partial class Newtext : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Newid;
		
		private string _Newtxt1;
		
		private string _Newtxt2;
		
		private string _Newtxt3;
		
		private string _NewPic;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewidChanging(int value);
    partial void OnNewidChanged();
    partial void OnNewtxt1Changing(string value);
    partial void OnNewtxt1Changed();
    partial void OnNewtxt2Changing(string value);
    partial void OnNewtxt2Changed();
    partial void OnNewtxt3Changing(string value);
    partial void OnNewtxt3Changed();
    partial void OnNewPicChanging(string value);
    partial void OnNewPicChanged();
    #endregion
		
		public Newtext()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Newid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Newid
		{
			get
			{
				return this._Newid;
			}
			set
			{
				if ((this._Newid != value))
				{
					this.OnNewidChanging(value);
					this.SendPropertyChanging();
					this._Newid = value;
					this.SendPropertyChanged("Newid");
					this.OnNewidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Newtxt1", DbType="NVarChar(MAX)")]
		public string Newtxt1
		{
			get
			{
				return this._Newtxt1;
			}
			set
			{
				if ((this._Newtxt1 != value))
				{
					this.OnNewtxt1Changing(value);
					this.SendPropertyChanging();
					this._Newtxt1 = value;
					this.SendPropertyChanged("Newtxt1");
					this.OnNewtxt1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Newtxt2", DbType="NVarChar(MAX)")]
		public string Newtxt2
		{
			get
			{
				return this._Newtxt2;
			}
			set
			{
				if ((this._Newtxt2 != value))
				{
					this.OnNewtxt2Changing(value);
					this.SendPropertyChanging();
					this._Newtxt2 = value;
					this.SendPropertyChanged("Newtxt2");
					this.OnNewtxt2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Newtxt3", DbType="NVarChar(MAX)")]
		public string Newtxt3
		{
			get
			{
				return this._Newtxt3;
			}
			set
			{
				if ((this._Newtxt3 != value))
				{
					this.OnNewtxt3Changing(value);
					this.SendPropertyChanging();
					this._Newtxt3 = value;
					this.SendPropertyChanged("Newtxt3");
					this.OnNewtxt3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewPic", DbType="NVarChar(MAX)")]
		public string NewPic
		{
			get
			{
				return this._NewPic;
			}
			set
			{
				if ((this._NewPic != value))
				{
					this.OnNewPicChanging(value);
					this.SendPropertyChanging();
					this._NewPic = value;
					this.SendPropertyChanged("NewPic");
					this.OnNewPicChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Newtraffic")]
	public partial class Newtraffic
	{
		
		private int _Newid;
		
		private string _Newtext1;
		
		private string _Newtext2;
		
		private string _Newtext3;
		
		private string _NewPic;
		
		public Newtraffic()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Newid", DbType="Int NOT NULL")]
		public int Newid
		{
			get
			{
				return this._Newid;
			}
			set
			{
				if ((this._Newid != value))
				{
					this._Newid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Newtext1", DbType="NVarChar(50)")]
		public string Newtext1
		{
			get
			{
				return this._Newtext1;
			}
			set
			{
				if ((this._Newtext1 != value))
				{
					this._Newtext1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Newtext2", DbType="NVarChar(MAX)")]
		public string Newtext2
		{
			get
			{
				return this._Newtext2;
			}
			set
			{
				if ((this._Newtext2 != value))
				{
					this._Newtext2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Newtext3", DbType="NVarChar(MAX)")]
		public string Newtext3
		{
			get
			{
				return this._Newtext3;
			}
			set
			{
				if ((this._Newtext3 != value))
				{
					this._Newtext3 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewPic", DbType="NVarChar(MAX)")]
		public string NewPic
		{
			get
			{
				return this._NewPic;
			}
			set
			{
				if ((this._NewPic != value))
				{
					this._NewPic = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderID;
		
		private string _AccountID;
		
		private System.Nullable<int> _TotalQuantity;
		
		private System.Nullable<double> _TotalAmount;
		
		private string _InvoiceNo;
		
		private System.Nullable<System.DateTime> _BusinessDate;
		
		private string _PaymentCertificate;
		
		private System.Nullable<int> _PaymentMethodID;
		
		private EntitySet<OrderDetail> _OrderDetail;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<PaymentMethod> _PaymentMethod;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnAccountIDChanging(string value);
    partial void OnAccountIDChanged();
    partial void OnTotalQuantityChanging(System.Nullable<int> value);
    partial void OnTotalQuantityChanged();
    partial void OnTotalAmountChanging(System.Nullable<double> value);
    partial void OnTotalAmountChanged();
    partial void OnInvoiceNoChanging(string value);
    partial void OnInvoiceNoChanged();
    partial void OnBusinessDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBusinessDateChanged();
    partial void OnPaymentCertificateChanging(string value);
    partial void OnPaymentCertificateChanged();
    partial void OnPaymentMethodIDChanging(System.Nullable<int> value);
    partial void OnPaymentMethodIDChanged();
    #endregion
		
		public Order()
		{
			this._OrderDetail = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetail), new Action<OrderDetail>(this.detach_OrderDetail));
			this._Account = default(EntityRef<Account>);
			this._PaymentMethod = default(EntityRef<PaymentMethod>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="NChar(10)")]
		public string AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalQuantity", DbType="Int")]
		public System.Nullable<int> TotalQuantity
		{
			get
			{
				return this._TotalQuantity;
			}
			set
			{
				if ((this._TotalQuantity != value))
				{
					this.OnTotalQuantityChanging(value);
					this.SendPropertyChanging();
					this._TotalQuantity = value;
					this.SendPropertyChanged("TotalQuantity");
					this.OnTotalQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="Float")]
		public System.Nullable<double> TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceNo", DbType="NChar(8)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessDate", DbType="Date")]
		public System.Nullable<System.DateTime> BusinessDate
		{
			get
			{
				return this._BusinessDate;
			}
			set
			{
				if ((this._BusinessDate != value))
				{
					this.OnBusinessDateChanging(value);
					this.SendPropertyChanging();
					this._BusinessDate = value;
					this.SendPropertyChanged("BusinessDate");
					this.OnBusinessDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentCertificate", DbType="NVarChar(10)")]
		public string PaymentCertificate
		{
			get
			{
				return this._PaymentCertificate;
			}
			set
			{
				if ((this._PaymentCertificate != value))
				{
					this.OnPaymentCertificateChanging(value);
					this.SendPropertyChanging();
					this._PaymentCertificate = value;
					this.SendPropertyChanged("PaymentCertificate");
					this.OnPaymentCertificateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMethodID", DbType="Int")]
		public System.Nullable<int> PaymentMethodID
		{
			get
			{
				return this._PaymentMethodID;
			}
			set
			{
				if ((this._PaymentMethodID != value))
				{
					if (this._PaymentMethod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentMethodIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethodID = value;
					this.SendPropertyChanged("PaymentMethodID");
					this.OnPaymentMethodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDetail", Storage="_OrderDetail", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<OrderDetail> OrderDetail
		{
			get
			{
				return this._OrderDetail;
			}
			set
			{
				this._OrderDetail.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Order", Storage="_Account", ThisKey="AccountID", OtherKey="AccountID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Order.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Order.Add(this);
						this._AccountID = value.AccountID;
					}
					else
					{
						this._AccountID = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMethod_Order", Storage="_PaymentMethod", ThisKey="PaymentMethodID", OtherKey="PaymentMethodID", IsForeignKey=true)]
		public PaymentMethod PaymentMethod
		{
			get
			{
				return this._PaymentMethod.Entity;
			}
			set
			{
				PaymentMethod previousValue = this._PaymentMethod.Entity;
				if (((previousValue != value) 
							|| (this._PaymentMethod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentMethod.Entity = null;
						previousValue.Order.Remove(this);
					}
					this._PaymentMethod.Entity = value;
					if ((value != null))
					{
						value.Order.Add(this);
						this._PaymentMethodID = value.PaymentMethodID;
					}
					else
					{
						this._PaymentMethodID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PaymentMethod");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetail(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderDetail(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDetail")]
	public partial class OrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderDetailNo;
		
		private int _OrderID;
		
		private int _OrderDetailID;
		
		private System.Nullable<int> _TicketOffersID;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<double> _Subtotal;
		
		private EntitySet<QueueOfAttractions> _QueueOfAttractions;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<TicketOffers> _TicketOffers;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderDetailNoChanging(int value);
    partial void OnOrderDetailNoChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnOrderDetailIDChanging(int value);
    partial void OnOrderDetailIDChanged();
    partial void OnTicketOffersIDChanging(System.Nullable<int> value);
    partial void OnTicketOffersIDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnSubtotalChanging(System.Nullable<double> value);
    partial void OnSubtotalChanged();
    #endregion
		
		public OrderDetail()
		{
			this._QueueOfAttractions = new EntitySet<QueueOfAttractions>(new Action<QueueOfAttractions>(this.attach_QueueOfAttractions), new Action<QueueOfAttractions>(this.detach_QueueOfAttractions));
			this._Order = default(EntityRef<Order>);
			this._TicketOffers = default(EntityRef<TicketOffers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDetailNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrderDetailNo
		{
			get
			{
				return this._OrderDetailNo;
			}
			set
			{
				if ((this._OrderDetailNo != value))
				{
					this.OnOrderDetailNoChanging(value);
					this.SendPropertyChanging();
					this._OrderDetailNo = value;
					this.SendPropertyChanged("OrderDetailNo");
					this.OnOrderDetailNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDetailID", DbType="Int NOT NULL")]
		public int OrderDetailID
		{
			get
			{
				return this._OrderDetailID;
			}
			set
			{
				if ((this._OrderDetailID != value))
				{
					this.OnOrderDetailIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDetailID = value;
					this.SendPropertyChanged("OrderDetailID");
					this.OnOrderDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketOffersID", DbType="Int")]
		public System.Nullable<int> TicketOffersID
		{
			get
			{
				return this._TicketOffersID;
			}
			set
			{
				if ((this._TicketOffersID != value))
				{
					if (this._TicketOffers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicketOffersIDChanging(value);
					this.SendPropertyChanging();
					this._TicketOffersID = value;
					this.SendPropertyChanged("TicketOffersID");
					this.OnTicketOffersIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subtotal", DbType="Float")]
		public System.Nullable<double> Subtotal
		{
			get
			{
				return this._Subtotal;
			}
			set
			{
				if ((this._Subtotal != value))
				{
					this.OnSubtotalChanging(value);
					this.SendPropertyChanging();
					this._Subtotal = value;
					this.SendPropertyChanged("Subtotal");
					this.OnSubtotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderDetail_QueueOfAttractions", Storage="_QueueOfAttractions", ThisKey="OrderDetailNo", OtherKey="OrderDetailNo")]
		public EntitySet<QueueOfAttractions> QueueOfAttractions
		{
			get
			{
				return this._QueueOfAttractions;
			}
			set
			{
				this._QueueOfAttractions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDetail", Storage="_Order", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderDetail.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderDetail.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TicketOffers_OrderDetail", Storage="_TicketOffers", ThisKey="TicketOffersID", OtherKey="TicketOffersID", IsForeignKey=true)]
		public TicketOffers TicketOffers
		{
			get
			{
				return this._TicketOffers.Entity;
			}
			set
			{
				TicketOffers previousValue = this._TicketOffers.Entity;
				if (((previousValue != value) 
							|| (this._TicketOffers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketOffers.Entity = null;
						previousValue.OrderDetail.Remove(this);
					}
					this._TicketOffers.Entity = value;
					if ((value != null))
					{
						value.OrderDetail.Add(this);
						this._TicketOffersID = value.TicketOffersID;
					}
					else
					{
						this._TicketOffersID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TicketOffers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QueueOfAttractions(QueueOfAttractions entity)
		{
			this.SendPropertyChanging();
			entity.OrderDetail = this;
		}
		
		private void detach_QueueOfAttractions(QueueOfAttractions entity)
		{
			this.SendPropertyChanging();
			entity.OrderDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentMethod")]
	public partial class PaymentMethod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentMethodID;
		
		private string _Method;
		
		private System.Nullable<double> _Discount;
		
		private System.Nullable<bool> _isUsable;
		
		private EntitySet<Order> _Order;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentMethodIDChanging(int value);
    partial void OnPaymentMethodIDChanged();
    partial void OnMethodChanging(string value);
    partial void OnMethodChanged();
    partial void OnDiscountChanging(System.Nullable<double> value);
    partial void OnDiscountChanged();
    partial void OnisUsableChanging(System.Nullable<bool> value);
    partial void OnisUsableChanged();
    #endregion
		
		public PaymentMethod()
		{
			this._Order = new EntitySet<Order>(new Action<Order>(this.attach_Order), new Action<Order>(this.detach_Order));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMethodID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PaymentMethodID
		{
			get
			{
				return this._PaymentMethodID;
			}
			set
			{
				if ((this._PaymentMethodID != value))
				{
					this.OnPaymentMethodIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethodID = value;
					this.SendPropertyChanged("PaymentMethodID");
					this.OnPaymentMethodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Method", DbType="NVarChar(10)")]
		public string Method
		{
			get
			{
				return this._Method;
			}
			set
			{
				if ((this._Method != value))
				{
					this.OnMethodChanging(value);
					this.SendPropertyChanging();
					this._Method = value;
					this.SendPropertyChanged("Method");
					this.OnMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Float")]
		public System.Nullable<double> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isUsable", DbType="Bit")]
		public System.Nullable<bool> isUsable
		{
			get
			{
				return this._isUsable;
			}
			set
			{
				if ((this._isUsable != value))
				{
					this.OnisUsableChanging(value);
					this.SendPropertyChanging();
					this._isUsable = value;
					this.SendPropertyChanged("isUsable");
					this.OnisUsableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMethod_Order", Storage="_Order", ThisKey="PaymentMethodID", OtherKey="PaymentMethodID")]
		public EntitySet<Order> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				this._Order.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMethod = this;
		}
		
		private void detach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMethod = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QueueOfAttractions")]
	public partial class QueueOfAttractions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QueueNo;
		
		private System.Nullable<int> _OrderDetailNo;
		
		private string _TicketNo;
		
		private int _AttractionsID;
		
		private string _Status;
		
		private EntityRef<Attractions> _Attractions;
		
		private EntityRef<OrderDetail> _OrderDetail;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQueueNoChanging(int value);
    partial void OnQueueNoChanged();
    partial void OnOrderDetailNoChanging(System.Nullable<int> value);
    partial void OnOrderDetailNoChanged();
    partial void OnTicketNoChanging(string value);
    partial void OnTicketNoChanged();
    partial void OnAttractionsIDChanging(int value);
    partial void OnAttractionsIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public QueueOfAttractions()
		{
			this._Attractions = default(EntityRef<Attractions>);
			this._OrderDetail = default(EntityRef<OrderDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QueueNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QueueNo
		{
			get
			{
				return this._QueueNo;
			}
			set
			{
				if ((this._QueueNo != value))
				{
					this.OnQueueNoChanging(value);
					this.SendPropertyChanging();
					this._QueueNo = value;
					this.SendPropertyChanged("QueueNo");
					this.OnQueueNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDetailNo", DbType="Int")]
		public System.Nullable<int> OrderDetailNo
		{
			get
			{
				return this._OrderDetailNo;
			}
			set
			{
				if ((this._OrderDetailNo != value))
				{
					if (this._OrderDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDetailNoChanging(value);
					this.SendPropertyChanging();
					this._OrderDetailNo = value;
					this.SendPropertyChanged("OrderDetailNo");
					this.OnOrderDetailNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketNo", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string TicketNo
		{
			get
			{
				return this._TicketNo;
			}
			set
			{
				if ((this._TicketNo != value))
				{
					this.OnTicketNoChanging(value);
					this.SendPropertyChanging();
					this._TicketNo = value;
					this.SendPropertyChanged("TicketNo");
					this.OnTicketNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttractionsID", DbType="Int NOT NULL")]
		public int AttractionsID
		{
			get
			{
				return this._AttractionsID;
			}
			set
			{
				if ((this._AttractionsID != value))
				{
					if (this._Attractions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttractionsIDChanging(value);
					this.SendPropertyChanging();
					this._AttractionsID = value;
					this.SendPropertyChanged("AttractionsID");
					this.OnAttractionsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NChar(2)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attractions_QueueOfAttractions", Storage="_Attractions", ThisKey="AttractionsID", OtherKey="AttractionsID", IsForeignKey=true)]
		public Attractions Attractions
		{
			get
			{
				return this._Attractions.Entity;
			}
			set
			{
				Attractions previousValue = this._Attractions.Entity;
				if (((previousValue != value) 
							|| (this._Attractions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attractions.Entity = null;
						previousValue.QueueOfAttractions.Remove(this);
					}
					this._Attractions.Entity = value;
					if ((value != null))
					{
						value.QueueOfAttractions.Add(this);
						this._AttractionsID = value.AttractionsID;
					}
					else
					{
						this._AttractionsID = default(int);
					}
					this.SendPropertyChanged("Attractions");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderDetail_QueueOfAttractions", Storage="_OrderDetail", ThisKey="OrderDetailNo", OtherKey="OrderDetailNo", IsForeignKey=true)]
		public OrderDetail OrderDetail
		{
			get
			{
				return this._OrderDetail.Entity;
			}
			set
			{
				OrderDetail previousValue = this._OrderDetail.Entity;
				if (((previousValue != value) 
							|| (this._OrderDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDetail.Entity = null;
						previousValue.QueueOfAttractions.Remove(this);
					}
					this._OrderDetail.Entity = value;
					if ((value != null))
					{
						value.QueueOfAttractions.Add(this);
						this._OrderDetailNo = value.OrderDetailNo;
					}
					else
					{
						this._OrderDetailNo = default(Nullable<int>);
					}
					this.SendPropertyChanged("OrderDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ThemePark")]
	public partial class ThemePark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ThemeParkID;
		
		private string _ThemeParkName;
		
		private string _Introduction;
		
		private string _NewPic;
		
		private EntitySet<Attractions> _Attractions;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThemeParkIDChanging(int value);
    partial void OnThemeParkIDChanged();
    partial void OnThemeParkNameChanging(string value);
    partial void OnThemeParkNameChanged();
    partial void OnIntroductionChanging(string value);
    partial void OnIntroductionChanged();
    partial void OnNewPicChanging(string value);
    partial void OnNewPicChanged();
    #endregion
		
		public ThemePark()
		{
			this._Attractions = new EntitySet<Attractions>(new Action<Attractions>(this.attach_Attractions), new Action<Attractions>(this.detach_Attractions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThemeParkID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ThemeParkID
		{
			get
			{
				return this._ThemeParkID;
			}
			set
			{
				if ((this._ThemeParkID != value))
				{
					this.OnThemeParkIDChanging(value);
					this.SendPropertyChanging();
					this._ThemeParkID = value;
					this.SendPropertyChanged("ThemeParkID");
					this.OnThemeParkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThemeParkName", DbType="NVarChar(50)")]
		public string ThemeParkName
		{
			get
			{
				return this._ThemeParkName;
			}
			set
			{
				if ((this._ThemeParkName != value))
				{
					this.OnThemeParkNameChanging(value);
					this.SendPropertyChanging();
					this._ThemeParkName = value;
					this.SendPropertyChanged("ThemeParkName");
					this.OnThemeParkNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Introduction", DbType="NVarChar(500)")]
		public string Introduction
		{
			get
			{
				return this._Introduction;
			}
			set
			{
				if ((this._Introduction != value))
				{
					this.OnIntroductionChanging(value);
					this.SendPropertyChanging();
					this._Introduction = value;
					this.SendPropertyChanged("Introduction");
					this.OnIntroductionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewPic", DbType="NVarChar(MAX)")]
		public string NewPic
		{
			get
			{
				return this._NewPic;
			}
			set
			{
				if ((this._NewPic != value))
				{
					this.OnNewPicChanging(value);
					this.SendPropertyChanging();
					this._NewPic = value;
					this.SendPropertyChanged("NewPic");
					this.OnNewPicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThemePark_Attractions", Storage="_Attractions", ThisKey="ThemeParkID", OtherKey="ThemeParkID")]
		public EntitySet<Attractions> Attractions
		{
			get
			{
				return this._Attractions;
			}
			set
			{
				this._Attractions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attractions(Attractions entity)
		{
			this.SendPropertyChanging();
			entity.ThemePark = this;
		}
		
		private void detach_Attractions(Attractions entity)
		{
			this.SendPropertyChanging();
			entity.ThemePark = null;
		}
	}
}
#pragma warning restore 1591
